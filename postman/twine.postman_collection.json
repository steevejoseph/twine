{
	"info": {
		"_postman_id": "cbf3d909-cd4e-403b-b0fd-c25e229ec709",
		"name": "twine",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Local",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Signup",
							"item": [
								{
									"name": "Signup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Signup should pass on randomly generated user\", () => {",
													"    pm.response.to.have.status(200);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const r = Math.floor(Math.random() * 1e9);",
													"const signupUserEmail = `test${r}@fakedomain.com`;",
													"pm.collectionVariables.set('signupUserEmail', signupUserEmail);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "{{signupUserEmail}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "test",
													"type": "text"
												},
												{
													"key": "type",
													"value": "test",
													"type": "text"
												},
												{
													"key": "friends",
													"value": "thesteevejoseph@gmail.com",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/signup",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] Duplicate Signup Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Signup should fail when a duplicate email passed\", () => {",
													"    pm.response.to.have.status(500);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "thesteevejoseph@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "test",
													"type": "text"
												},
												{
													"key": "type",
													"value": "test",
													"type": "text"
												},
												{
													"key": "friends",
													"value": "thesteevejoseph@gmail.com",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/signup",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"signup"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Login",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login should pass with existing user\", () => {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Login should return a token\", function () {",
													"    pm.expect(!!jsonData.token).to.eql(true);",
													"});",
													"",
													"postman.setEnvironmentVariable(\"token\", jsonData.token);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "thesteevejoseph@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "dontlook",
													"type": "text"
												},
												{
													"key": "token",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/login",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Fail] Incorrect password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login should pass with existing user\", () => {",
													"    pm.response.to.have.status(404);",
													"})",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Failed login should return error message\", function () {",
													"    pm.expect(!!jsonData.message).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "thesteevejoseph@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "dontlook1",
													"type": "text"
												},
												{
													"key": "token",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/login",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Fail] Incorrect username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login should pass with existing user\", () => {",
													"    pm.response.to.have.status(404);",
													"})",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Failed login should return error message\", function () {",
													"    pm.expect(!!jsonData.message).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "thesteevejoseph1@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "dontlook",
													"type": "text"
												},
												{
													"key": "token",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/login",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET Users",
							"item": [
								{
									"name": "GET Users (auth required)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Users array non-empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.length).to.be.gt(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] No auth for GET Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Users Except Self (auth required)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users/except-self",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users",
												"except-self"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] No auth for GET Users Except Self",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users/except-self",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users",
												"except-self"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Users Except Self And Friends (auth required)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users/except-self-friends",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users",
												"except-self-friends"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] No auth for GET Users Except Self And Friends",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users/except-self-friends",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users",
												"except-self-friends"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET User",
							"item": [
								{
									"name": "GET User By ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users/61c1fa7ce9d2cfdcf9e1e94d",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users",
												"61c1fa7ce9d2cfdcf9e1e94d"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] Unknown ID passed to GET User By ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error should have a message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(!!jsonData.message).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users/61c1fa7ce9d2cfdcf9e1e94b",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users",
												"61c1fa7ce9d2cfdcf9e1e94b"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] Invalid ID passed to GET User By ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_URL}}/api/users/nonExistantId",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"users",
												"nonExistantId"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Reflections",
					"item": [
						{
							"name": "Upload Reflection",
							"item": [
								{
									"name": "Upload Reflection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data field non-empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).have.property('data');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Client-ID 04ba46f682ffaaa",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"type": "file",
													"src": "/Users/steeve/UCF/CS/Projects/twine/postman/test-images/before-fine.jpeg"
												},
												{
													"key": "reflectee",
													"value": "thesteevejoseph@gmail.com",
													"type": "text"
												},
												{
													"key": "reflector",
													"value": "hello@steevejoseph.me",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "/Users/steeve/Downloads/twine-test-vid.MP4",
													"disabled": true
												},
												{
													"key": "image",
													"type": "file",
													"src": "/Users/steeve/Desktop/hbait/before-fine.jpeg",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/reflections/upload",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"reflections",
												"upload"
											]
										}
									},
									"response": [
										{
											"name": "Upload Reflection",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"key": "Authorization",
														"value": "Client-ID 04ba46f682ffaaa",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "image",
															"type": "file",
															"src": "/Users/steeve/UCF/CS/Projects/twine/postman/test-images/before-fine.jpeg"
														},
														{
															"key": "reflectee",
															"value": "thesteevejoseph@gmail.com",
															"type": "text"
														},
														{
															"key": "reflector",
															"value": "hello@steevejoseph.me",
															"type": "text"
														},
														{
															"key": "image",
															"type": "file",
															"src": "/Users/steeve/Downloads/twine-test-vid.MP4",
															"disabled": true
														},
														{
															"key": "image",
															"type": "file",
															"src": "/Users/steeve/Desktop/hbait/before-fine.jpeg",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{API_URL}}/api/reflections/upload",
													"host": [
														"{{API_URL}}"
													],
													"path": [
														"api",
														"reflections",
														"upload"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "280"
												},
												{
													"key": "ETag",
													"value": "W/\"118-jC2GkGSn6hFOdaeYiSb/LFKBiQM\""
												},
												{
													"key": "Date",
													"value": "Wed, 29 Dec 2021 00:35:32 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"data\": [\n        {\n            \"reflectee\": \"thesteevejoseph@gmail.com\",\n            \"type\": \"image/jpeg\",\n            \"title\": null,\n            \"description\": null,\n            \"deletehash\": \"LwbdPXBlY2gSSER\",\n            \"link\": \"https://i.imgur.com/OV8aY1M.jpeg\",\n            \"name\": \"before-fine.jpeg\",\n            \"reflector\": \"hello@steevejoseph.me\",\n            \"_id\": \"61cbad549d6d72d95781a591\",\n            \"__v\": 0\n        }\n    ]\n}"
										}
									]
								},
								{
									"name": "[FAIL] Reflection Not Uploaded as Form Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Message field non-empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).have.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Client-ID 04ba46f682ffaaa",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "reflectee",
													"value": "a",
													"type": "text"
												},
												{
													"key": "reflector",
													"value": "b",
													"type": "text"
												},
												{
													"key": "image\n",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/reflections/upload",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"reflections",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] No reflector in body of Upload Reflection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Message field non-empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).have.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Client-ID 04ba46f682ffaaa",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"type": "file",
													"src": [
														"/Users/steeve/Desktop/hbait/before-fine.jpeg",
														"/Users/steeve/Desktop/hbait/fine.jpeg"
													]
												},
												{
													"key": "reflectee",
													"value": "thesteevejoseph@gmail.com",
													"type": "text"
												},
												{
													"key": "reflector",
													"value": "hello@steevejoseph.me",
													"type": "text",
													"disabled": true
												},
												{
													"key": "image",
													"type": "file",
													"src": [],
													"disabled": true
												},
												{
													"key": "image",
													"type": "file",
													"src": "/Users/steeve/Desktop/hbait/before-fine.jpeg",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/reflections/upload",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"reflections",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] No reflectee in body of Upload Reflection Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Message field non-empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).have.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Client-ID 04ba46f682ffaaa",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "image",
													"type": "file",
													"src": [
														"/Users/steeve/Desktop/hbait/before-fine.jpeg",
														"/Users/steeve/Desktop/hbait/fine.jpeg"
													]
												},
												{
													"key": "reflectee",
													"value": "thesteevejoseph@gmail.com",
													"type": "text",
													"disabled": true
												},
												{
													"key": "reflector",
													"value": "hello@steevejoseph.me",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "/Users/steeve/Downloads/twine-test-vid.MP4",
													"disabled": true
												},
												{
													"key": "image",
													"type": "file",
													"src": "/Users/steeve/Desktop/hbait/before-fine.jpeg",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/reflections/upload",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"reflections",
												"upload"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Request Reflection",
							"item": [
								{
									"name": "Request Reflections (auth)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "reflectors",
													"value": "hello@steevejoseph.me",
													"type": "text"
												},
												{
													"key": "reflectors",
													"value": "steevejoseph@knights.ucf.edu",
													"type": "text"
												},
												{
													"key": "reflectors",
													"value": "blah",
													"type": "text",
													"disabled": true
												},
												{
													"key": "reflectors",
													"value": "blah",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/reflections/request",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"reflections",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] No auth for Request Reflections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Message field non-empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).have.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "reflectors",
													"value": "hello@steevejoseph.me",
													"type": "text"
												},
												{
													"key": "reflectors",
													"value": "steevejoseph@knights.ucf.edu",
													"type": "text"
												},
												{
													"key": "reflectors",
													"value": "blah",
													"type": "text",
													"disabled": true
												},
												{
													"key": "reflectors",
													"value": "blah",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/reflections/request",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"reflections",
												"request"
											]
										}
									},
									"response": []
								},
								{
									"name": "[FAIL] No reflector for Request Reflections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Message field non-empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).have.property('message');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "reflectors",
													"value": "hello@steevejoseph.me",
													"type": "text",
													"disabled": true
												},
												{
													"key": "reflectors",
													"value": "steevejoseph@knights.ucf.edu",
													"type": "text",
													"disabled": true
												},
												{
													"key": "reflectors",
													"value": "blah",
													"type": "text",
													"disabled": true
												},
												{
													"key": "reflectors",
													"value": "blah",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{API_URL}}/api/reflections/request",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"api",
												"reflections",
												"request"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Imgur",
			"item": [
				{
					"name": "Delete Imgur Post",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID 04ba46f682ffaaa",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/image/tBzGFIFF4qAPEZy\n",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image",
								"tBzGFIFF4qAPEZy\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "Imgur API Upload",
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Client-ID 04ba46f682ffaaa",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": [
										"/Users/steeve/Desktop/hbait/before-fine.jpeg",
										"/Users/steeve/Desktop/hbait/fine.jpeg"
									],
									"disabled": true
								},
								{
									"key": "image",
									"type": "file",
									"src": "/Users/steeve/Downloads/twine-test-vid.MP4"
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/upload\n",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"upload\n"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "signupUserEmail",
			"value": ""
		}
	]
}